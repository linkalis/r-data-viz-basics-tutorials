# Sam's prior
sam_prior <- beta(3, 12)
sam_predictive_probs <- pbetap(c(3, 12), 12, seq(0, 12, 1))
barplot(sam_predictive_probs, main="Sam's predictive probs") # plot showing predictions for number of successes in future sample of n=12
# Joe's prior
p <- seq(0.1, 0.5, 0.1)
midpt <- seq(0.15, 0.45, 0.1)
prior <- c(0.5, 0.2, 0.2, 0.05, 0.05)
joe_prior <- histprior(p, midpt, prior)
joe_predictive_probs <- pdiscp(p, prior, 12, seq(0, 12, 1))
joe_predictive_probs <- as.data.frame(joe_predictive_probs)
barplot(joe_predictive_probs, main="Joe's predictive probs") # plot showing predictions for number of successes in future sample of n=12
joe_predictive_probs <- as.data.frame(joe_predictive_probs)
joe_predictive_probs <- pdiscp(p, prior, 12, seq(0, 12, 1))
joe_predictive_probs <- as.data.frame(joe_predictive_probs)
View(joe_predictive_probs)
future_sample_success_possibilities <- seq(0, 12, 1)
future_sample_success_possibilities <- seq(0, 12, 1)
joe_future <- as.data.frame(future_sample_success_possibilities, joe_predictive_probs)
View(joe_future)
joe_future <- as.data.frame(cbind(future_sample_success_possibilities, joe_predictive_probs))
View(joe_future)
future_sample_successes <- seq(0, 12, 1)
future_sample_successes <- seq(0, 12, 1)
# Joe's prior
p <- seq(0.1, 0.5, 0.1)
midpt <- seq(0.15, 0.45, 0.1)
prior <- c(0.5, 0.2, 0.2, 0.05, 0.05)
joe_prior <- histprior(p, midpt, prior)
joe_predictive_probs <- pdiscp(p, prior, 12, seq(0, 12, 1))
joe_prediction <- as.data.frame(cbind(future_sample_successes, joe_predictive_probs))
barplot(joe_predictive_probs, main="Joe's predictive probs") # plot showing predictions for number of successes in future sample of n=12
# Sam's prior
sam_prior <- beta(3, 12)
sam_predictive_probs <- pbetap(c(3, 12), 12, seq(0, 12, 1))
sam_prediction <- as.data.frame(cbind(future_sample_successes, sam_predictive_probs))
barplot(sam_predictive_probs, main="Sam's predictive probs") # plot showing predictions for number of successes in future sample of n=12
future_sample_successes <- seq(0, 12, 1)
# Joe's prior
p <- seq(0.1, 0.5, 0.1)
midpt <- seq(0.15, 0.45, 0.1)
prior <- c(0.5, 0.2, 0.2, 0.05, 0.05)
joe_prior <- histprior(p, midpt, prior)
joe_predictive_probs <- pdiscp(p, prior, 12, seq(0, 12, 1))
joe_prediction <- as.data.frame(cbind(future_sample_successes, joe_predictive_probs))
barplot(joe_prediction, main="Joe's predictive probs") # plot showing predictions for number of successes in future sample of n=12
future_sample_successes <- seq(0, 12, 1)
# Joe's prior
p <- seq(0.1, 0.5, 0.1)
midpt <- seq(0.15, 0.45, 0.1)
prior <- c(0.5, 0.2, 0.2, 0.05, 0.05)
joe_prior <- histprior(p, midpt, prior)
joe_predictive_probs <- pdiscp(p, prior, 12, seq(0, 12, 1))
joe_prediction <- as.data.frame(cbind(future_sample_successes, joe_predictive_probs))
barplot(joe_prediction$joe_predictive_probs, main="Joe's predictive probs") # plot showing predictions for number of successes in future sample of n=12
# Sam's prior
sam_prior <- beta(3, 12)
sam_predictive_probs <- pbetap(c(3, 12), 12, seq(0, 12, 1))
sam_prediction <- as.data.frame(cbind(future_sample_successes, sam_predictive_probs))
barplot(sam_predictive_probs, main="Sam's predictive probs") # plot showing predictions for number of successes in future sample of n=12
future_sample_successes <- seq(0, 12, 1)
# Joe's prior
p <- seq(0.1, 0.5, 0.1)
midpt <- seq(0.15, 0.45, 0.1)
prior <- c(0.5, 0.2, 0.2, 0.05, 0.05)
joe_prior <- histprior(p, midpt, prior)
joe_predictive_probs <- pdiscp(p, prior, 12, seq(0, 12, 1))
joe_prediction <- as.data.frame(cbind(future_sample_successes, joe_predictive_probs))
barplot(joe_prediction$joe_predictive_probs, xlab=joe_prediction$future_sample_successes, main="Joe's predictive probs") # plot showing predictions for number of successes in future sample of n=12
# Sam's prior
sam_prior <- beta(3, 12)
sam_predictive_probs <- pbetap(c(3, 12), 12, seq(0, 12, 1))
sam_prediction <- as.data.frame(cbind(future_sample_successes, sam_predictive_probs))
barplot(sam_predictive_probs, main="Sam's predictive probs") # plot showing predictions for number of successes in future sample of n=12
View(joe_prediction)
future_sample_successes <- seq(0, 12, 1)
# Joe's prior
p <- seq(0.1, 0.5, 0.1)
midpt <- seq(0.15, 0.45, 0.1)
prior <- c(0.5, 0.2, 0.2, 0.05, 0.05)
joe_prior <- histprior(p, midpt, prior)
joe_predictive_probs <- pdiscp(p, prior, 12, seq(0, 12, 1))
joe_prediction <- as.data.frame(cbind(future_sample_successes, joe_predictive_probs))
barplot(joe_prediction$joe_predictive_probs, names=joe_prediction$future_sample_successes, main="Joe's predictive probs") # plot showing predictions for number of successes in future sample of n=12
# Sam's prior
sam_prior <- beta(3, 12)
sam_predictive_probs <- pbetap(c(3, 12), 12, seq(0, 12, 1))
sam_prediction <- as.data.frame(cbind(future_sample_successes, sam_predictive_probs))
barplot(sam_predictive_probs, main="Sam's predictive probs") # plot showing predictions for number of successes in future sample of n=12
future_sample_success_possibilities <- seq(0, 12, 1)
# Joe's prior
p <- seq(0.1, 0.5, 0.1)
midpt <- seq(0.15, 0.45, 0.1)
prior <- c(0.5, 0.2, 0.2, 0.05, 0.05)
joe_prior <- histprior(p, midpt, prior)
joe_predictive_probs <- pdiscp(p, prior, 12, seq(0, 12, 1))
barplot(joe_predictive_probs, names=future_sample_success_possibilities, main="Joe's predictive probs") # plot showing predictions for number of successes in future sample of n=12
# Sam's prior
sam_prior <- beta(3, 12)
sam_predictive_probs <- pbetap(c(3, 12), 12, seq(0, 12, 1))
barplot(sam_predictive_probs, names=future_sample_success_possibilities, main="Sam's predictive probs") # plot showing predictions for number of successes in future sample of n=12
# PRIOR
# histprior(vector of values for which density is to be computed, midpoints, prob)
# seq(from, to, by)
p = seq(0, 1, 0.1)
midpt = seq(0.05, 0.95, 0.1)
prior = c(1, 1, 1, 5, 10, 10, 5, 1, 1, 1) # raw weights for prior
prior = prior/sum(prior) # convert weights into probabilities out of 1
plot(p, histprior(p, midpt, prior), type="l")
# LIKELIHOOD - based on data
# Spin a virtual penny 20 times, use this to create our likelihood (beta distribution of s successes & f failures)
sample.space <- c(0,1)
theta <- 0.5 # this is a fair coin
N <- 20 # we want to flip a coin 20 times
flips <- sample(c(0,1), size = 20, replace = TRUE, prob = c(0.5, 0.5))
s <- 8
f <- 12
like <- dbeta(p, s+1, f+1)
# POSTERIOR
post <- like * histprior(p, midpt, prior)
post = post/sum(post)
hist(post)
# SIMULATED SAMPLE from posterior
ps = sample(p, replace = TRUE, prob = post)
hist(ps, xlim=c(0,1))
set.seed(1337)
flips <- sample(c(0,1), size = 20, replace = TRUE, prob = c(0.5, 0.5))
table(flips)
# PRIOR
# histprior(vector of values for which density is to be computed, midpoints, prob)
# seq(from, to, by)
p = seq(0, 1, 0.1)
midpt = seq(0.05, 0.95, 0.1)
prior = c(1, 1, 1, 5, 10, 10, 5, 1, 1, 1) # raw weights for prior
prior = prior/sum(prior) # convert weights into probabilities out of 1
plot(p, histprior(p, midpt, prior), type="l")
# LIKELIHOOD - based on data
# Spin a virtual penny 20 times, use this to create our likelihood (beta distribution of s successes & f failures)
sample.space <- c(0,1)
theta <- 0.5 # this is a fair coin
N <- 20 # we want to flip a coin 20 times
set.seed(1337)
flips <- sample(c(0,1), size = 20, replace = TRUE, prob = c(0.5, 0.5))
s <- 9
f <- 11
like <- dbeta(p, s+1, f+1)
# POSTERIOR
post <- like * histprior(p, midpt, prior)
post = post/sum(post)
hist(post)
# SIMULATED SAMPLE from posterior
ps = sample(p, replace = TRUE, prob = post)
hist(ps, xlim=c(0,1))
# PRIOR
# histprior(vector of values for which density is to be computed, midpoints, prob)
# seq(from, to, by)
p = seq(0, 1, 0.1)
midpt = seq(0.05, 0.95, 0.1)
prior = c(1, 1, 1, 5, 10, 10, 5, 1, 1, 1) # raw weights for prior
prior = prior/sum(prior) # convert weights into probabilities out of 1
plot(p, histprior(p, midpt, prior), type="l")
# LIKELIHOOD - based on data
# Spin a virtual penny 20 times, use this to create our likelihood (beta distribution of s successes & f failures)
sample.space <- c(0,1)
theta <- 0.5 # this is a fair coin
N <- 20 # we want to flip a coin 20 times
set.seed(1337)
flips <- sample(c(0,1), size = 20, replace = TRUE, prob = c(0.5, 0.5))
s <- 9
f <- 11
like <- dbeta(p, s+1, f+1)
# POSTERIOR
post <- like * histprior(p, midpt, prior)
post = post/sum(post)
hist(post, xlim=c(0, 1))
# SIMULATED SAMPLE from posterior
ps = sample(p, replace = TRUE, prob = post)
hist(ps, xlim=c(0, 1))
# PRIOR
# histprior(vector of values for which density is to be computed, midpoints, prob)
# seq(from, to, by)
p = seq(0, 1, 0.1)
midpt = seq(0.05, 0.95, 0.1)
prior = c(1, 1, 1, 5, 10, 10, 5, 1, 1, 1) # raw weights for prior
prior = prior/sum(prior) # convert weights into probabilities out of 1
plot(p, histprior(p, midpt, prior), type="l")
# LIKELIHOOD - based on data
# Spin a virtual penny 20 times, use this to create our likelihood (beta distribution of s successes & f failures)
sample.space <- c(0,1)
theta <- 0.5 # this is a fair coin
N <- 20 # we want to flip a coin 20 times
set.seed(1337)
flips <- sample(c(0,1), size = 20, replace = TRUE, prob = c(0.5, 0.5))
s <- 9
f <- 11
like <- dbeta(p, s+1, f+1)
# POSTERIOR
post <- like * histprior(p, midpt, prior)
post = post/sum(post)
hist(post, xlim=c(0, 1))
# SIMULATED SAMPLE from posterior
ps = sample(p, replace = TRUE, prob = post)
hist(ps, xlim=c(0, 1))
# Joe's prior - a discrete histogram
p <- seq(0.1, 0.5, 0.1)
midpt <- seq(0.15, 0.45, 0.1)
prior <- c(0.5, 0.2, 0.2, 0.05, 0.05)
joe_prior <- histprior(p, midpt, prior)
joe_predictive_probs <- pdiscp(p, prior, 12, seq(0, 12, 1))
future_sample_success_possibilities <- seq(0, 12, 1)
plot(joe_predictive_probs, type="h")
#barplot(joe_predictive_probs, names=future_sample_success_possibilities, main="Joe's predictive probs") # plot showing predictions for number of successes in future sample of n=12
# Sam's prior - a beta(3, 12) distribution
sam_prior <- beta(3, 12)
sam_predictive_probs <- pbetap(c(3, 12), 12, seq(0, 12, 1))
plot(sam_predictive_probs, type="h")
#barplot(sam_predictive_probs, names=future_sample_success_possibilities, main="Sam's predictive probs") # plot showing predictions for number of successes in future sample of n=12
# Joe's prior - a discrete histogram
p <- seq(0.1, 0.5, 0.1)
midpt <- seq(0.15, 0.45, 0.1)
prior <- c(0.5, 0.2, 0.2, 0.05, 0.05)
joe_prior <- histprior(p, midpt, prior)
joe_predictive_probs <- pdiscp(p, prior, 12, seq(0, 12, 1))
future_sample_success_possibilities <- seq(0, 12, 1)
plot(joe_predictive_probs, type="h")
#barplot(joe_predictive_probs, names=future_sample_success_possibilities, main="Joe's predictive probs") # plot showing predictions for number of successes in future sample of n=12
# Sam's prior - a beta(3, 12) distribution
sam_prior <- beta(3, 12)
sam_predictive_probs <- pbetap(c(3, 12), 12, seq(0, 12, 1))
plot(sam_predictive_probs, type="h", names=p)
#barplot(sam_predictive_probs, names=future_sample_success_possibilities, main="Sam's predictive probs") # plot showing predictions for number of successes in future sample of n=12
# PRIOR
# histprior(vector of values for which density is to be computed, midpoints, prob)
# seq(from, to, by)
p = seq(0, 1, 0.1)
midpt = seq(0.05, 0.95, 0.1)
prior = c(1, 1, 1, 5, 10, 10, 5, 1, 1, 1) # raw weights for prior
prior = prior/sum(prior) # convert weights into probabilities out of 1
plot(p, histprior(p, midpt, prior), type="l")
# LIKELIHOOD - based on data
# Spin a virtual penny 20 times, use this to create our likelihood (beta distribution of s successes & f failures)
sample.space <- c(0,1)
theta <- 0.5 # this is a fair coin
N <- 20 # we want to flip a coin 20 times
set.seed(1337)
flips <- sample(c(0,1), size = 20, replace = TRUE, prob = c(0.5, 0.5))
s <- 9
f <- 11
like <- dbeta(p, s+1, f+1)
# POSTERIOR
post <- like * histprior(p, midpt, prior)
post = post/sum(post)
hist(post, xlim=c(0, 1))
# SIMULATED SAMPLE from posterior
ps = sample(p, replace = TRUE, prob = post)
hist(ps, xlim=c(0, 1))
# PRIOR
# histprior(vector of values for which density is to be computed, midpoints, prob)
# seq(from, to, by)
p = seq(0, 1, 0.1)
midpt = seq(0.05, 0.95, 0.1)
prior = c(1, 1, 1, 5, 10, 10, 5, 1, 1, 1) # raw weights for prior
prior = prior/sum(prior) # convert weights into probabilities out of 1
plot(p, histprior(p, midpt, prior), type="l")
# LIKELIHOOD - based on data
# Spin a virtual penny 20 times, use this to create our likelihood (beta distribution of s successes & f failures)
sample.space <- c(0,1)
theta <- 0.5 # this is a fair coin
N <- 20 # we want to flip a coin 20 times
set.seed(1337)
flips <- sample(c(0,1), size = 20, replace = TRUE, prob = c(0.5, 0.5))
s <- 9
f <- 11
like <- dbeta(p, s+1, f+1)
# POSTERIOR
post <- like * histprior(p, midpt, prior)
post = post/sum(post)
post(post, type="h")
# PRIOR
# histprior(vector of values for which density is to be computed, midpoints, prob)
# seq(from, to, by)
p = seq(0, 1, 0.1)
midpt = seq(0.05, 0.95, 0.1)
prior = c(1, 1, 1, 5, 10, 10, 5, 1, 1, 1) # raw weights for prior
prior = prior/sum(prior) # convert weights into probabilities out of 1
plot(p, histprior(p, midpt, prior), type="l")
# LIKELIHOOD - based on data
# Spin a virtual penny 20 times, use this to create our likelihood (beta distribution of s successes & f failures)
sample.space <- c(0,1)
theta <- 0.5 # this is a fair coin
N <- 20 # we want to flip a coin 20 times
set.seed(1337)
flips <- sample(c(0,1), size = 20, replace = TRUE, prob = c(0.5, 0.5))
s <- 9
f <- 11
like <- dbeta(p, s+1, f+1)
# POSTERIOR
post <- like * histprior(p, midpt, prior)
post = post/sum(post)
plot(post, type="h")
# SIMULATED SAMPLE from posterior
ps = sample(p, replace = TRUE, prob = post)
hist(ps, xlim=c(0, 1))
# PRIOR
# histprior(vector of values for which density is to be computed, midpoints, prob)
# seq(from, to, by)
p = seq(0, 1, 0.1)
midpt = seq(0.05, 0.95, 0.1)
prior = c(1, 1, 1, 5, 10, 10, 5, 1, 1, 1) # raw weights for prior
prior = prior/sum(prior) # convert weights into probabilities out of 1
plot(p, histprior(p, midpt, prior), type="l")
# LIKELIHOOD - based on data
# Spin a virtual penny 20 times, use this to create our likelihood (beta distribution of s successes & f failures)
sample.space <- c(0,1)
theta <- 0.5 # this is a fair coin
N <- 20 # we want to flip a coin 20 times
set.seed(1337)
flips <- sample(c(0,1), size = 20, replace = TRUE, prob = c(0.5, 0.5))
s <- 9
f <- 11
like <- dbeta(p, s+1, f+1)
# POSTERIOR
post <- like * histprior(p, midpt, prior)
post = post/sum(post)
plot(post, type="h")
# SIMULATED SAMPLE from posterior
ps = sample(p, 1000, replace = TRUE, prob = post)
hist(ps, xlim=c(0, 1))
ps
# PRIOR
# histprior(vector of values for which density is to be computed, midpoints, prob)
# seq(from, to, by)
p = seq(0, 1, 0.1)
midpt = seq(0.05, 0.95, 0.1)
prior = c(1, 1, 1, 5, 10, 10, 5, 1, 1, 1) # raw weights for prior
prior = prior/sum(prior) # convert weights into probabilities out of 1
plot(p, histprior(p, midpt, prior), type="l")
# LIKELIHOOD - based on data
# Spin a virtual penny 20 times, use this to create our likelihood (beta distribution of s successes & f failures)
sample.space <- c(0,1)
theta <- 0.5 # this is a fair coin
N <- 20 # we want to flip a coin 20 times
set.seed(1337)
flips <- sample(c(0,1), size = 20, replace = TRUE, prob = c(0.5, 0.5))
s <- 9
f <- 11
like <- dbeta(p, s+1, f+1)
# POSTERIOR
post <- like * histprior(p, midpt, prior)
post = post/sum(post)
plot(post, type="h")
# SIMULATED SAMPLE from posterior
ps = sample(p, 1000, replace = TRUE, prob = post)
hist(ps, xlim=c(0, 1))
# PRIOR
# histprior(vector of values for which density is to be computed, midpoints, prob)
# seq(from, to, by)
p = seq(0, 1, 0.1)
midpt = seq(0.05, 0.95, 0.1)
prior = c(1, 1, 1, 5, 10, 10, 5, 1, 1, 1) # raw weights for prior
prior = prior/sum(prior) # convert weights into probabilities out of 1
plot(p, histprior(p, midpt, prior), type="l")
# LIKELIHOOD - based on data
# Spin a virtual penny 20 times, use this to create our likelihood (beta distribution of s successes & f failures)
sample.space <- c(0,1)
theta <- 0.5 # this is a fair coin
N <- 20 # we want to flip a coin 20 times
set.seed(1337)
flips <- sample(c(0,1), size = 20, replace = TRUE, prob = c(0.5, 0.5))
s <- 9
f <- 11
like <- dbeta(p, s+1, f+1)
# POSTERIOR
post <- like * histprior(p, midpt, prior)
post = post/sum(post)
plot(post, type="h")
# SIMULATED SAMPLE from posterior
ps = sample(p, 1000, replace = TRUE, prob = post)
hist(ps, xlim=c(0, 1))
# PRIOR
# histprior(vector of values for which density is to be computed, midpoints, prob)
# seq(from, to, by)
p = seq(0, 1, 0.1)
midpt = seq(0.05, 0.95, 0.1)
prior = c(1, 1, 1, 5, 10, 10, 5, 1, 1, 1) # raw weights for prior
prior = prior/sum(prior) # convert weights into probabilities out of 1
plot(p, histprior(p, midpt, prior), type="l")
# LIKELIHOOD - based on data
# Spin a virtual penny 20 times, use this to create our likelihood (beta distribution of s successes & f failures)
sample.space <- c(0,1)
theta <- 0.5 # this is a fair coin
N <- 20 # we want to flip a coin 20 times
set.seed(1337)
flips <- sample(c(0,1), size = 20, replace = TRUE, prob = c(0.5, 0.5))
s <- 9
f <- 11
like <- dbeta(p, s+1, f+1)
# POSTERIOR
post <- like * histprior(p, midpt, prior)
post = post/sum(post)
plot(post, type="h")
# SIMULATED SAMPLE from posterior
ps = sample(p, 1000, replace = TRUE, prob = post)
hist(ps, xlim=c(0, 1), bins=4)
# PRIOR
# histprior(vector of values for which density is to be computed, midpoints, prob)
# seq(from, to, by)
p = seq(0, 1, 0.1)
midpt = seq(0.05, 0.95, 0.1)
prior = c(1, 1, 1, 5, 10, 10, 5, 1, 1, 1) # raw weights for prior
prior = prior/sum(prior) # convert weights into probabilities out of 1
plot(p, histprior(p, midpt, prior), type="l")
# LIKELIHOOD - based on data
# Spin a virtual penny 20 times, use this to create our likelihood (beta distribution of s successes & f failures)
sample.space <- c(0,1)
theta <- 0.5 # this is a fair coin
N <- 20 # we want to flip a coin 20 times
set.seed(1337)
flips <- sample(c(0,1), size = 20, replace = TRUE, prob = c(0.5, 0.5))
s <- 9
f <- 11
like <- dbeta(p, s+1, f+1)
# POSTERIOR
post <- like * histprior(p, midpt, prior)
post = post/sum(post)
plot(post, type="h")
# SIMULATED SAMPLE from posterior
ps = sample(p, 1000, replace = TRUE, prob = post)
hist(ps, xlim=c(0, 1), bin=4)
# PRIOR
# histprior(vector of values for which density is to be computed, midpoints, prob)
# seq(from, to, by)
p = seq(0, 1, 0.1)
midpt = seq(0.05, 0.95, 0.1)
prior = c(1, 1, 1, 5, 10, 10, 5, 1, 1, 1) # raw weights for prior
prior = prior/sum(prior) # convert weights into probabilities out of 1
plot(p, histprior(p, midpt, prior), type="l")
# LIKELIHOOD - based on data
# Spin a virtual penny 20 times, use this to create our likelihood (beta distribution of s successes & f failures)
sample.space <- c(0,1)
theta <- 0.5 # this is a fair coin
N <- 20 # we want to flip a coin 20 times
set.seed(1337)
flips <- sample(c(0,1), size = 20, replace = TRUE, prob = c(0.5, 0.5))
s <- 9
f <- 11
like <- dbeta(p, s+1, f+1)
# POSTERIOR
post <- like * histprior(p, midpt, prior)
post = post/sum(post)
plot(post, type="h")
# SIMULATED SAMPLE from posterior
ps = sample(p, 1000, replace = TRUE, prob = post)
hist(ps, xlim=c(0, 1))
curve(dbeta(x, 1, 1))
curve(dbeta(x, 2, 2))
curve(dbeta(x, 1, 1))
curve(dbeta(x, 2, 2))
curve(dbeta(x, 2, 1))
curve(dbeta(x, 1, 1))
curve(dbeta(x, 2, 2))
curve(dbeta(x, 4, 1))
# Joe's prior - a discrete histogram
p <- seq(0.1, 0.5, 0.1)
midpt <- seq(0.15, 0.45, 0.1)
prior <- c(0.5, 0.2, 0.2, 0.05, 0.05)
joe_prior <- histprior(p, midpt, prior)
joe_predictive_probs <- pdiscp(p, prior, 12, seq(0, 12, 1))
future_sample_success_possibilities <- seq(0, 12, 1)
plot(joe_predictive_probs, type="h")
#barplot(joe_predictive_probs, names=future_sample_success_possibilities, main="Joe's predictive probs") # plot showing predictions for number of successes in future sample of n=12
# Sam's prior - a beta(3, 12) distribution
sam_prior <- beta(3, 12)
sam_predictive_probs <- pbetap(c(3, 12), 12, seq(0, 12, 1))
plot(sam_predictive_probs, type="h")
#barplot(sam_predictive_probs, names=future_sample_success_possibilities, main="Sam's predictive probs") # plot showing predictions for number of successes in future sample of n=12
x <- c("A", "B", "C", "D", "E")
mean(x)
setwd("~/r-data-viz-basics-tutorials/TCRUG_Presentation_11-30-2017")
baseball_tournament_df <- baseball_tournament_df %>% mutate(mvp_score = (games_attended * 3) + total_runs)
library(dplyr)
baseball_tournament_df <- baseball_tournament_df %>% mutate(mvp_score = (games_attended * 3) + total_runs)
# Character vector
player_name <- c("Abdi", "Brit", "Chloe", "Dani", "Ed", "Fatosh", "Greg", "Hannah", "Isaak", "Jo", "Kasey", "Laura", "Maunela", "Nate", "Olive", "Penelope", "Quince", "Ralf", "Sara", "Theo", "Ursula", "Vince", "Wil", "Xander", "Yolanda", "Zeus")
team_name <- c("Dolphins", "Jets", "Sharks", "Jets", "Dolphins", "Sharks", "Dolphins", "Sharks", "Sharks", "Jets", "Sharks", "Dolphins", "Dolphins", "Sharks", "Dolphins", "Jets", "Dolphins", "Jets", "Sharks", "Jets", "Jets", "Dolphins", "Sharks", "Dolphins", "Jets", "Sharks")
# Numeric vector
player_weight <- c(177.49, 144.1, 161.6, 137.1, 193.1, 188.9, 121.0, 157.1, 195.1, 151.3, 124.5, 197.9, 190.8, 125.5, 139.0, 124.1, 138.3, 194.1, 167.9, 164.1, 171.6, 157.1, 161.8, 191.8, 167.9, 120.4)
# Integer vector
player_age <- c(24, 18, 21, 24, 21, 22, 20, 24, 22, 22, 21, 23, 21, 18, 18, 18, 18, 24, 19, 18, 20, 19, 23, 23, 23, 18)
# Logical vector
vegetarian <- c(TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE)
# Factor vector
tshirt_size <- factor(c("L", "XL", "S", "L", "M", "M", "L", "XL", "S", "S", "M", "M", "XL", "S", "S", "M", "S", "M", "L", "XL", "S", "S", "M", "L", "M", "M"), levels=c("S", "M", "L", "XL"))
# Integer vector
games_attended <- c(8, 6, 5, 9, 9, 6, 6, 6, 10, 9, 5, 9, 6, 8, 7, 9, 10, 5, 5, 7, 8, 7, 9, 7, 5, 7)
# Integer vector
total_runs <- c(10, 10, 14, 4, 0, 17, 26, 12, 2, 10, 17, 0, 3, 13, 12, 13, 10, 0, 16, 19, 4, 22, 21, 14, 3, 4)
baseball_tournament_df <- data.frame(player_name, team_name, player_weight, player_age, vegetarian, tshirt_size, games_attended, total_runs)
baseball_tournament_df <- baseball_tournament_df %>% mutate(mvp_score = (games_attended * 3) + total_runs)
baseball_tournament_df
install.packages(xkcd)
install.packages("xkcd")
install.packages("xkcd")
install.packages("extrafont")
install.packages("xkcd")
font_import(pattern="[H/h]umor")
library(xkcd)
font_import(pattern="[H/h]umor")
font_import(pattern="[H/h]umor")
font_import(pattern="Humor Sans")
font_import(pattern="Humor")
font_import(pattern="Humor-Sans")
